'use client';

import { useState } from 'react';
import { Share2, Download, Plus, Eye } from 'lucide-react';
import { Card } from '@/components/ui/Card';
import { Button } from '@/components/ui/Button';
import { Modal } from '@/components/ui/Modal';
import { LEGAL_SCENARIOS } from '@/lib/constants';

interface RightsCard {
  id: string;
  title: string;
  content: string[];
  createdAt: Date;
  scenario: string;
}

export function RightsCards() {
  const [cards, setCards] = useState<RightsCard[]>([
    {
      id: '1',
      title: 'Traffic Stop Rights',
      content: [
        'Right to remain silent',
        'Right to refuse consent to search',
        'Right to ask if you\'re free to go',
        'Right to an attorney'
      ],
      createdAt: new Date(),
      scenario: 'traffic-stop'
    }
  ]);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showPreviewModal, setShowPreviewModal] = useState(false);
  const [selectedCard, setSelectedCard] = useState<RightsCard | null>(null);
  const [selectedScenario, setSelectedScenario] = useState('');

  const handleCreateCard = () => {
    if (!selectedScenario) return;

    const scenario = LEGAL_SCENARIOS.find(s => s.id === selectedScenario);
    if (!scenario) return;

    const newCard: RightsCard = {
      id: Date.now().toString(),
      title: `${scenario.title} Rights`,
      content: scenario.scripts.keyRights,
      createdAt: new Date(),
      scenario: selectedScenario
    };

    setCards([...cards, newCard]);
    setShowCreateModal(false);
    setSelectedScenario('');
  };

  const handleShareCard = (card: RightsCard) => {
    const shareText = `${card.title}\n\n${card.content.map(item => `• ${item}`).join('\n')}\n\nGenerated by Pocket Justice App`;
    
    if (navigator.share) {
      navigator.share({
        title: card.title,
        text: shareText,
      });
    } else {
      navigator.clipboard.writeText(shareText);
      alert('Rights card copied to clipboard!');
    }
  };

  const handlePreviewCard = (card: RightsCard) => {
    setSelectedCard(card);
    setShowPreviewModal(true);
  };

  const generateCardImage = (card: RightsCard) => {
    // In a real app, this would generate an actual image
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    
    if (ctx) {
      canvas.width = 400;
      canvas.height = 600;
      
      // Background gradient
      const gradient = ctx.createLinearGradient(0, 0, 0, 600);
      gradient.addColorStop(0, '#1e3a8a');
      gradient.addColorStop(1, '#7c3aed');
      ctx.fillStyle = gradient;
      ctx.fillRect(0, 0, 400, 600);
      
      // Title
      ctx.fillStyle = 'white';
      ctx.font = 'bold 24px Arial';
      ctx.textAlign = 'center';
      ctx.fillText(card.title, 200, 80);
      
      // Content
      ctx.font = '16px Arial';
      ctx.textAlign = 'left';
      let y = 140;
      card.content.forEach((item, index) => {
        ctx.fillText(`• ${item}`, 40, y);
        y += 40;
      });
      
      // Footer
      ctx.font = '12px Arial';
      ctx.textAlign = 'center';
      ctx.fillStyle = '#93c5fd';
      ctx.fillText('Generated by Pocket Justice', 200, 550);
    }
    
    return canvas.toDataURL('image/png');
  };

  const handleDownloadCard = (card: RightsCard) => {
    const dataUrl = generateCardImage(card);
    const link = document.createElement('a');
    link.download = `${card.title.replace(/\s+/g, '-').toLowerCase()}-rights-card.png`;
    link.href = dataUrl;
    link.click();
  };

  return (
    <>
      <div className="space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <h2 className="text-2xl font-bold text-white">Rights Cards</h2>
          <Button
            variant="secondary"
            onClick={() => setShowCreateModal(true)}
            className="flex items-center"
          >
            <Plus size={16} className="mr-2" />
            Create Card
          </Button>
        </div>

        {/* Cards Grid */}
        {cards.length === 0 ? (
          <Card className="p-8 text-center">
            <p className="text-blue-200 mb-4">No rights cards created yet</p>
            <p className="text-sm text-blue-300 mb-6">
              Create shareable cards with your legal rights for quick reference
            </p>
            <Button variant="primary" onClick={() => setShowCreateModal(true)}>
              Create Your First Card
            </Button>
          </Card>
        ) : (
          <div className="grid gap-4">
            {cards.map((card) => (
              <Card key={card.id} className="p-4">
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <h3 className="font-semibold text-white mb-2">{card.title}</h3>
                    <div className="space-y-1 mb-3">
                      {card.content.slice(0, 3).map((item, index) => (
                        <p key={index} className="text-sm text-blue-200">• {item}</p>
                      ))}
                      {card.content.length > 3 && (
                        <p className="text-sm text-blue-300">+{card.content.length - 3} more rights</p>
                      )}
                    </div>
                    <p className="text-xs text-blue-300">
                      Created {card.createdAt.toLocaleDateString()}
                    </p>
                  </div>
                  <div className="flex space-x-2 ml-4">
                    <button
                      onClick={() => handlePreviewCard(card)}
                      className="p-2 hover:bg-white hover:bg-opacity-10 rounded-full transition-colors duration-200"
                      title="Preview"
                    >
                      <Eye size={16} className="text-blue-300" />
                    </button>
                    <button
                      onClick={() => handleShareCard(card)}
                      className="p-2 hover:bg-white hover:bg-opacity-10 rounded-full transition-colors duration-200"
                      title="Share"
                    >
                      <Share2 size={16} className="text-blue-300" />
                    </button>
                    <button
                      onClick={() => handleDownloadCard(card)}
                      className="p-2 hover:bg-white hover:bg-opacity-10 rounded-full transition-colors duration-200"
                      title="Download"
                    >
                      <Download size={16} className="text-blue-300" />
                    </button>
                  </div>
                </div>
              </Card>
            ))}
          </div>
        )}
      </div>

      {/* Create Card Modal */}
      <Modal
        isOpen={showCreateModal}
        onClose={() => setShowCreateModal(false)}
        title="Create Rights Card"
      >
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-white mb-2">
              Select Legal Scenario
            </label>
            <select
              value={selectedScenario}
              onChange={(e) => setSelectedScenario(e.target.value)}
              className="w-full px-3 py-2 bg-white bg-opacity-10 border border-white border-opacity-30 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="">Choose a scenario...</option>
              {LEGAL_SCENARIOS.map((scenario) => (
                <option key={scenario.id} value={scenario.id} className="bg-blue-900">
                  {scenario.title}
                </option>
              ))}
            </select>
          </div>

          {selectedScenario && (
            <div className="p-4 bg-blue-500 bg-opacity-20 rounded-lg border border-blue-400">
              <h4 className="font-medium text-blue-200 mb-2">Preview Rights:</h4>
              <div className="space-y-1">
                {LEGAL_SCENARIOS.find(s => s.id === selectedScenario)?.scripts.keyRights.map((right, index) => (
                  <p key={index} className="text-sm text-blue-100">• {right}</p>
                ))}
              </div>
            </div>
          )}

          <div className="flex space-x-3 pt-4">
            <Button
              variant="secondary"
              onClick={() => setShowCreateModal(false)}
              className="flex-1"
            >
              Cancel
            </Button>
            <Button
              variant="primary"
              onClick={handleCreateCard}
              disabled={!selectedScenario}
              className="flex-1"
            >
              Create Card
            </Button>
          </div>
        </div>
      </Modal>

      {/* Preview Card Modal */}
      <Modal
        isOpen={showPreviewModal}
        onClose={() => setShowPreviewModal(false)}
        title="Rights Card Preview"
      >
        {selectedCard && (
          <div className="space-y-4">
            <div className="bg-gradient-to-br from-blue-600 to-purple-700 p-6 rounded-lg text-center">
              <h3 className="text-xl font-bold text-white mb-4">{selectedCard.title}</h3>
              <div className="space-y-2 text-left">
                {selectedCard.content.map((item, index) => (
                  <p key={index} className="text-blue-100">• {item}</p>
                ))}
              </div>
              <p className="text-blue-200 text-sm mt-4">Generated by Pocket Justice</p>
            </div>
            
            <div className="flex space-x-3">
              <Button
                variant="secondary"
                onClick={() => handleShareCard(selectedCard)}
                className="flex-1 flex items-center justify-center"
              >
                <Share2 size={16} className="mr-2" />
                Share
              </Button>
              <Button
                variant="primary"
                onClick={() => handleDownloadCard(selectedCard)}
                className="flex-1 flex items-center justify-center"
              >
                <Download size={16} className="mr-2" />
                Download
              </Button>
            </div>
          </div>
        )}
      </Modal>
    </>
  );
}
